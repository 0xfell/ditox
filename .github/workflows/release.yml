name: Release

on:
  push:
    tags:
      - rust-v*

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-linux:
    name: Build (Linux x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Test
        run: cargo test --workspace --all-features --no-fail-fast

      # Default features for ditox-cli include `libsql`, so this single build
      # produces a binary that supports both local sqlite and remote (turso)
      # at runtime without extra flags.
      - name: Build release (CLI)
        run: cargo build --release -p ditox-cli

      - name: Package artifact + checksums
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#rust-v}"
          mkdir -p dist
          cp target/release/ditox-cli dist/
          TAR=dist/ditox-cli-${VERSION}-linux-x86_64.tar.gz
          tar -czf "$TAR" -C dist ditox-cli
          (cd dist && sha256sum "$(basename "$TAR")" > SHA256SUMS)

      - name: Upload build outputs
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: |
            dist/ditox-cli-*-linux-x86_64.tar.gz
            dist/SHA256SUMS

  build-nix:
    name: Build (Nix flake)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: nix build
        run: nix build -L .#ditox

      - name: Archive binary
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#rust-v}"
          mkdir -p dist
          cp result/bin/ditox-cli dist/
          tar -czf dist/ditox-cli-${VERSION}-nix-linux-x86_64.tar.gz -C dist ditox-cli

      - name: Upload nix output
        uses: actions/upload-artifact@v4
        with:
          name: nix-linux-x86_64
          path: dist/ditox-cli-*-nix-linux-x86_64.tar.gz

  publish:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-nix]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: true
          path: dist

      - name: List payload
        run: ls -lah dist

      - name: Create/Update release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            dist/ditox-cli-*-linux-x86_64.tar.gz
            dist/ditox-cli-*-nix-linux-x86_64.tar.gz
            dist/SHA256SUMS
