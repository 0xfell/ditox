name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: Tag to (re)publish (e.g., v0.1.2)
        required: false

permissions:
  contents: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate release notes
        id: notes
        shell: bash
        env:
          CURRENT_TAG: ${{ github.ref_name }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
        run: |
          set -euo pipefail
          if [ -n "${INPUT_TAG:-}" ]; then CURRENT_TAG="$INPUT_TAG"; fi
          mkdir -p dist
          # Find previous annotated semver tag (fallback to first commit)
          PREV_TAG=$(git tag --sort=creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | tail -n 2 | head -n 1 || true)
          if [ -z "${PREV_TAG:-}" ] || [ "${PREV_TAG}" = "${CURRENT_TAG}" ]; then
            PREV_TAG=$(git tag --sort=creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1 || true)
          fi
          echo "prev_tag=${PREV_TAG}" >> "$GITHUB_OUTPUT"

          RANGE="${PREV_TAG}..${CURRENT_TAG}"
          if [ -z "${PREV_TAG}" ]; then RANGE="${CURRENT_TAG}"; fi

          # Collect commits (hash \t subject \t author)
          git log --pretty='%H%x09%s%x09%an' ${RANGE} > dist/commits.tsv || true

          # Build sections (conventional commits)
          FEATURES=$(awk -F '\t' '/\tfeat(\(|:)/ {print "- " $2}' dist/commits.tsv)
          FIXES=$(awk -F '\t' '/\tfix(\(|:)/ {print "- " $2}' dist/commits.tsv)
          PERF=$(awk -F '\t' '/\tperf(\(|:)/ {print "- " $2}' dist/commits.tsv)
          REFACTOR=$(awk -F '\t' '/\trefactor(\(|:)/ {print "- " $2}' dist/commits.tsv)
          DOCS=$(awk -F '\t' '/\tdocs(\(|:)/ {print "- " $2}' dist/commits.tsv)
          CI=$(awk -F '\t' '/\tci(\(|:)/ {print "- " $2}' dist/commits.tsv)
          OTHER=$(awk -F '\t' '!/\t(feat|fix|perf|refactor|docs|ci)(\(|:)/ {print "- " $2}' dist/commits.tsv)

          echo "# ${CURRENT_TAG}" > dist/RELEASE_NOTES.md
          echo >> dist/RELEASE_NOTES.md
          echo "[Compare changes]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/compare/${PREV_TAG}...${CURRENT_TAG})" >> dist/RELEASE_NOTES.md
          echo >> dist/RELEASE_NOTES.md
          echo "## Notable Changes" >> dist/RELEASE_NOTES.md
          if [ -n "${FEATURES:-}" ]; then
            echo "### Features" >> dist/RELEASE_NOTES.md
            echo "$FEATURES" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${FIXES:-}" ]; then
            echo "### Fixes" >> dist/RELEASE_NOTES.md
            echo "$FIXES" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${PERF:-}" ]; then
            echo "### Performance" >> dist/RELEASE_NOTES.md
            echo "$PERF" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${REFACTOR:-}" ]; then
            echo "### Refactor" >> dist/RELEASE_NOTES.md
            echo "$REFACTOR" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${DOCS:-}" ]; then
            echo "### Docs" >> dist/RELEASE_NOTES.md
            echo "$DOCS" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${CI:-}" ]; then
            echo "### CI" >> dist/RELEASE_NOTES.md
            echo "$CI" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi
          if [ -n "${OTHER:-}" ]; then
            echo "### Other" >> dist/RELEASE_NOTES.md
            echo "$OTHER" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi

          echo "## Merged Pull Requests" >> dist/RELEASE_NOTES.md
          git log --merges --pretty='%s' ${RANGE} | sed -n -E 's/Merge pull request #([0-9]+) .*/- PR #\1/p' >> dist/RELEASE_NOTES.md || true
          echo >> dist/RELEASE_NOTES.md

          CONTRIBUTORS=$(cut -f3 dist/commits.tsv | sort -u | sed 's/^/- /')
          if [ -n "${CONTRIBUTORS:-}" ]; then
            echo "## Contributors" >> dist/RELEASE_NOTES.md
            echo "$CONTRIBUTORS" >> dist/RELEASE_NOTES.md
            echo >> dist/RELEASE_NOTES.md
          fi

          echo "## Assets" >> dist/RELEASE_NOTES.md
          cat >> dist/RELEASE_NOTES.md << 'EOS'
The following artifacts are attached to this release once all jobs finish:

- ditox-Linux-x86_64.zip
- ditox-macOS-arm64.zip
- ditox-Windows-AMD64.zip
- ditox-cli-nix-linux-x86_64.tar.gz

Each asset includes a matching SHA256 file (.sha256).
EOS

      - name: Create/Update GitHub Release with notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.ref_name }}
          name: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.ref_name }}
          body_path: dist/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') }}

  build_upload:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Build release
        run: |
          cargo build --release -p ditox-cli -p ditox-clipd
      - name: Package (Unix)
        if: runner.os != 'Windows'
        id: pack_unix
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cp target/release/ditox-cli dist/ditox
          cp target/release/ditox-clipd dist/clipd
          ARCH=$(uname -m)
          ZIP="ditox-${{ runner.os }}-${ARCH}.zip"
          (cd dist && zip -9 "../${ZIP}" ditox clipd)
          echo "asset=${ZIP}" >> "$GITHUB_OUTPUT"
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$ZIP" | tee "$ZIP.sha256" >/dev/null
          else
            shasum -a 256 "$ZIP" | tee "$ZIP.sha256" >/dev/null
          fi
          echo "checksum=$ZIP.sha256" >> "$GITHUB_OUTPUT"
      - name: Package (Windows)
        if: runner.os == 'Windows'
        id: pack_win
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target/release/ditox-cli.exe dist/ditox.exe
          Copy-Item target/release/ditox-clipd.exe dist/clipd.exe
          $arch = $env:PROCESSOR_ARCHITECTURE
          $zip = "ditox-Windows-$arch.zip"
          Compress-Archive -Path dist/* -DestinationPath $zip -Force
          "asset=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          $hash = (Get-FileHash -Path $zip -Algorithm SHA256).Hash.ToLower()
          "$hash  $zip" | Out-File -FilePath "$zip.sha256" -Encoding ascii
          "checksum=$zip.sha256" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      - name: Upload to Release (Unix)
        if: runner.os != 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pack_unix.outputs.asset }}
      - name: Upload checksum (Unix)
        if: runner.os != 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pack_unix.outputs.checksum }}
      - name: Upload to Release (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pack_win.outputs.asset }}
      - name: Upload checksum (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pack_win.outputs.checksum }}

  nix_upload:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Build flake
        run: nix build -L .#ditox
      - name: Archive Nix binary
        run: |
          mkdir -p dist
          cp result/bin/ditox-cli dist/
          tar -czf dist/ditox-cli-nix-linux-x86_64.tar.gz -C dist ditox-cli
      - name: Upload Nix asset to Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/ditox-cli-nix-linux-x86_64.tar.gz
      - name: Upload Nix checksum
        run: |
          sha256sum dist/ditox-cli-nix-linux-x86_64.tar.gz > dist/ditox-cli-nix-linux-x86_64.tar.gz.sha256
        shell: bash
      - name: Attach Nix checksum
        uses: softprops/action-gh-release@v2
        with:
          files: dist/ditox-cli-nix-linux-x86_64.tar.gz.sha256
